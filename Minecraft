Random Python Program Generator
This page is powered by pyfuzz, a program generator I have written to test the JIT compiler of Unladen Swallow.

Reload to generate another program!

def func4(arg18, arg19):
    var24 = func5(arg18, arg19)
    var29 = func6(var24, arg18)
    var34 = func7(var29, arg19)
    var35 = func10()
    var36 = arg18 | (arg18 - arg18)
    var37 = var35 + var36 & var24 ^ var29
    var38 = 1333996374 & (arg18 | (var35 & -1205914206))
    var39 = var38 ^ (1063440604 + 241317916 + arg19)
    var40 = (244 - var24) ^ var38 & var35
    var41 = -179956639 - var40 ^ var39 & var29
    if var36 < var39:
        var42 = ((arg19 ^ -1521505940) + var35) - var29
    else:
        var42 = var24 & (var34 - arg18 - var39)
    var43 = var37 & 934879619
    var44 = (var34 & var37) ^ var41 + arg19
    var45 = var38 + var43
    var46 = var29 ^ ((var43 - var34) & var29)
    var47 = var36 & var46 ^ var41 - var46
    var48 = (var43 + -781 | var38) + var24
    var49 = (var37 - var47) + var47
    var50 = var40 - var44
    var51 = var44 & var43
    result = (var24 ^ var37 & var44 + (var50 & 470 + (var37 | var47 + var49 & 1830576050)) ^ var48) - var44 + var49
    return result
def func10():
    func8()
    result = len(range(36))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -5
def func7(arg30, arg31):
    var32 = 0
    for var33 in range(23):
        var32 += arg30 - -8 - arg30
    return var32
def func6(arg25, arg26):
    var27 = 0
    for var28 in range(6):
        var27 += arg26 ^ var27 - -10
    return var27
def func5(arg20, arg21):
    var22 = 0
    for var23 in range(49):
        var22 += (arg21 + arg21) & arg20
    return var22
def func3(arg13, arg14):
    var15 = arg13 & -574173013 ^ arg14
    var16 = arg14 & var15
    var17 = var15 - (var15 - var16 ^ arg14)
    result = (arg13 - arg14) ^ 528479270
    return result
def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var8 = (arg2 - -900) ^ 777
    var9 = var7 | -561 | -713
    var10 = (-1518980461 & -769 & arg2 + ((arg2 ^ arg1) + var8 - -2126133818)) - arg2
    var11 = (var10 | 276) - var9 - (var8 + 842237128 | arg2 ^ (var7 ^ ((arg2 & 828484632 ^ var9) ^ arg2 - var8 ^ arg1)) | ((arg1 ^ (var10 | -1481075152) | -909363919 - -985 - -940506406 & arg2 - var9) - arg1))
    var12 = var7 | arg2
    result = var12 | (-307247849 + arg1)
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(16):
        var5 += var6 + arg3 | var5
    return var5
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 3'
    print 'arg_number: 13'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 18'
    for i in xrange(25000):
        x = 5
        x = func3(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 52'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,
